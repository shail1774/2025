az group create --name TerraformStateRG --location

az storage account create --name tfstateaccount082025 --resource-group TerraformStateRG --location centralindia --sku Standard_LRS



az storage container create --account-name tfstateaccount082025 --name terraform-state --auth-mode login


terraform init

terraform init
terraform validate
terraform plan
terraform apply
terraform destroy



Fluxcd


flux bootstrap git  --token-auth=true  --url=https://dev.azure.com/techrock2025/test_2025/_git/FluxCDrepo  --branch=flux-cd-1  --username=git  --password="$GIT_PASSWORD"  --path=clusters/aks-dummy







PS C:\Test_2025\fluxcd> flux bootstrap git  --token-auth=true  --url=https://dev.azure.com/techrock2025/test_2025/_git/FluxCDrepo  --branch=flux-cd-1  --username=git  --password="$GIT_PASSWORD"  --path=clusters/aks-dummy
Please enter your Git repository password: 
► cloning branch "flux-cd-1" from Git repository "https://dev.azure.com/techrock2025/test_2025/_git/FluxCDrepo"
✔ cloned repository
► generating component manifests
✔ generated component manifests
✔ committed component manifests to "flux-cd-1" ("f5d028ca3e69873ef2b782543205d2ab7b13546a")
► pushing component manifests to "https://dev.azure.com/techrock2025/test_2025/_git/FluxCDrepo"
► installing components in "flux-system" namespace
✔ installed components
✔ reconciled components
► determining if source secret "flux-system/flux-system" exists
► generating source secret
► applying source secret "flux-system/flux-system"
✔ reconciled source secret
► generating sync manifests
✔ generated sync manifests
✔ committed sync manifests to "flux-cd-1" ("89df9344128c2ddcccd65653a60499221f4b00f8")
► pushing sync manifests to "https://dev.azure.com/techrock2025/test_2025/_git/FluxCDrepo"
► applying sync manifests
✔ reconciled sync configuration
◎ waiting for GitRepository "flux-system/flux-system" to be reconciled
✔ GitRepository reconciled successfully
◎ waiting for Kustomization "flux-system/flux-system" to be reconciled
✔ Kustomization reconciled successfully
► confirming components are healthy
✔ helm-controller: deployment ready
✔ kustomize-controller: deployment ready
✔ notification-controller: deployment ready
✔ source-controller: deployment ready
✔ all components are healthy


 
 Check Flux reconciliation status 
kubectl get pods -n  kube-system
flux get kustomizations -n kube-system
flux get helmreleases -n kube-system

flux reconcile helmrelease ingress-nginx -n kube-system
flux get helmreleases -n  kube-system

Inspect event logs for cert-manager resources

kubectl get events -n kube-system --sort-by='.metadata.creationTimestamp'


kubectl describe helmrelease cert-manager -n kube-system

Validate CustomResourceDefinitions (CRDs)
kubectl get crds | grep cert-manager

If CRDs are missing, cert-manager pods won’t start.

Flux HelmRelease should be configured with install.crds: Create to install CRDs automatically.


Confirm Flux components are healthy
kubectl get pods -n flux-system


To configure cert-manager to issue certificates for your applications running on your Kubernetes cluster, 
you need to create an Issuer or a ClusterIssuer resource that represents the certificate authority (CA) cert-manager will use to sign certificates. Then you create Certificate resources to request certificates for your apps.


helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm search repo ingress-nginx/ingress-nginx --versions


1. Suspend and Resume the HelmRelease
This forces the Helm controller to reset and retry reconciliation:

bash
flux suspend helmrelease ingress-nginx -n kube-system
flux resume helmrelease ingress-nginx -n kube-system

2. Annotate the HelmRelease to reset retries
You can reset Helm controller retry counts by adding a timestamp annotation:

bash
flux annotate helmrelease ingress-nginx -n kube-system reconcile.fluxcd.io/resetAt="$(date +%s)" --overwrite
flux reconcile helmrelease ingress-nginx -n kube-system
This triggers Flux to retry the Helm release operations.

3. Check HelmRelease status and events
Use kubectl describe to see error details or failure reasons:

bash
kubectl describe helmrelease ingress-nginx -n kube-system
kubectl get events -n kube-system --sort-by='.metadata.creationTimestamp'

4. Check Helm release status manually
Verify the Helm release state with Helm CLI:

bash
helm status ingress-nginx -n kube-system

If it is stuck, you may need to manually intervene (e.g., rollback or uninstall via Helm).

5. Delete HelmRelease Secret locks if stuck
Sometimes a HelmRelease may stuck due to stale secret locks. List and delete Helm secrets related to the release:

bash
kubectl get secrets -n kube-system | grep ingress-nginx
kubectl delete secret <secret-name> -n kube-system
Be cautious as deleting Helm secrets affects release tracking.

6. Check Flux and Helm controller logs
Look at the Helm controller logs to identify detailed errors:

bash
kubectl logs -n flux-system deployment/helm-controller

7. Increase HelmRelease install/upgrade timeouts
In your HelmRelease YAML, you can set:

text
spec:
 install:
   timeout: 15m0s
 upgrade:
   timeout: 15m0s
To allow more time for Helm operations on large charts.

8. Force reconciliation again
Finally, try a force reconcile with reset flag:

bash
flux reconcile helmrelease ingress-nginx -n kube-system --reset
If issues persist, sharing HelmRelease YAML and controller logs would help diagnose more specifically.

1. Check the status of all Flux resources in all namespaces:
bash
flux get all --all-namespaces

echo "$(pwd)/clusters/aks-main/Ado-Agent"
kustomize build ./clusters/aks-main/Ado-Agent

kubectl scale deploy ado-agent --replicas=0 -n kube-system


Flux Kustomization Health
You can check the health of all Kustomizations:

bash
kubectl get kustomizations -A

######################################

Checking the synchronization status between Azure repo and Rancher cluster for all applications.

To confirm that all applications managed by FluxCD are synchronized between an Azure Git repository and a Rancher Kubernetes cluster, follow these steps:

1. Check FluxCD Sync Status with flux CLI
Use the flux CLI in your Rancher cluster context to view the status of all Kustomizations or HelmReleases monitored by Flux.

Run:

bash
flux get kustomizations --all-namespaces
or

bash
flux get helmreleases --all-namespaces
Look for the STATUS column showing Ready meaning the resources in the Git repo are applied and in sync with the cluster.

The LAST APPLIED REVISION shows the Git commit SHA Flux last reconciled.

2. Use Flux Web UI (if installed)
Flux v2 supports integration with tools like Weave GitOps or other dashboards.

These visualize the sync status, errors, and drift for applications managed by Flux.

3. Check FluxCD Controller Logs
Inspect logs of Flux controllers (source-controller, kustomize-controller, helm-controller) for sync issues or errors.

4. Rancher UI Inspection
In Rancher, navigate to the cluster and projects where Flux deploys.

Check workloads for expected pods, deployments, and resource versions matching Git manifests.

5. GitOps Repo Verification
Ensure the Azure repo’s commit matched by Flux in status is the latest intended version.

Confirm that Flux reconciled the latest Git commit.

Example: Check all Flux Kustomizations status
bash
flux get kustomizations --all-namespaces
Sample output snippet:

text
NAME           READY  HEALTHY  LAST RECONCILE                 READY REVISION
my-app         True   True     2025-10-08T00:00:00Z           abc123def456
database       True   True     2025-10-07T20:00:00Z           abc123def456
...
Summary
Use flux get commands to confirm all Flux applications are in sync and healthy.

Compare Flux status READY REVISION with Azure repo commit SHA.

Verify Rancher workloads match expected application state.

Check Flux logs and dashboard for detailed status or sync errors.

If the Azure Git repository managed by FluxCD is not in sync with the Rancher Kubernetes cluster, here are structured troubleshooting steps to identify and resolve the issue:

1. Check Flux Sync Status
Run:

bash
flux get kustomizations --all-namespaces
or for Helm:

bash
flux get helmreleases --all-namespaces
Look for:

READY status (True means resources applied)

HEALTHY status

READY REVISION matches your latest Git commit SHA

2. Inspect Flux Controller Logs
Identify Flux controllers running in flux-system (or configured namespace).

For example:

bash
kubectl -n flux-system logs deployment/kustomize-controller
kubectl -n flux-system logs deployment/source-controller
kubectl -n flux-system logs deployment/helm-controller
Look for errors like git authentication failures, manifest parsing errors, or apply errors.

3. Verify Git Repository Access
Confirm Flux can access the Azure Git repo:

Check repository URL, branch, and credentials (SSH keys, tokens).

Verify secret containing credentials (e.g., SSH key secret) is correct and used by Flux.

Check if repository was recently moved or credentials changed.

4. Validate Manifest Files
Check manifests in Azure repo for syntax errors or invalid resource definitions.

Use kubectl apply --dry-run=client -f <manifest> locally or on cluster to verify.

5. Reconcile Flux Manually
Trigger a manual reconciliation to try force syncing:

bash
flux reconcile kustomization <name> --namespace <ns>
Monitor logs for real-time feedback.

6. Check for Resource Conflicts or Drift
Resources modified manually in cluster can cause drift.

Use:

bash
flux diff kustomization <name> --namespace <ns>
Review and fix differences or force reconcile.

7. Review Network/Proxy Issues
Confirm cluster nodes and Flux controllers have network access to Azure Git repositories.

Check if proxies or firewalls block access.

8. Validate Namespace & Resource Targeting
Ensure Flux Kustomization resources target correct namespaces.

Check manifest namespace declarations match Flux sync configuration.


